Description: "Load balancer template"
Parameters:
  pNumberFargateInstances:
    Description: Number of fargate instances
    Type: Number
    Default: 1
  pDatabaseUser:
    Description: Username used for accessing database
    Type: String
    Default: node
  pDatabasePassword:
    Description: Password used for accessing database
    Type: String
    Default: password
  pEnableExecute:
    Description: Enable access to FARGATE containers
    Type: String
    Default: true
    AllowedValues:
      - true
      - false


Resources:


  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnet group for rds
      SubnetIds:
        - Fn::ImportValue: !Sub dmitri-private-subnet-01
        - Fn::ImportValue: !Sub dmitri-private-subnet-02


  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.small
      Engine: MySQL
      MasterUsername: !Ref pDatabaseUser
      MasterUserPassword: !Ref pDatabasePassword
      NetworkType: ipv4
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - Fn::ImportValue: !Sub dmitri-sg-db


  SGLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow access to load balancer from port 3000
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: "3000"
          ToPort: "3000"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      VpcId: 
        Fn::ImportValue: !Sub dmitri-vpc

  ECSApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: dmitri-load-balancer
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref SGLoadBalancer
      Subnets: 
        - Fn::ImportValue: !Sub dmitri-public-subnet-01
        - Fn::ImportValue: !Sub dmitri-public-subnet-02

  ECSListener3000:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTP"
            Port: 80
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301" 
      LoadBalancerArn: !Ref ECSApplicationLoadBalancer
      Port: 3000
      Protocol: HTTP

  ECSListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ECSApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      IpAddressType: ipv4
      Name: dmitri-target-group
      Port: 80
      Protocol: HTTP 
      ProtocolVersion: HTTP1
      TargetType: ip
      VpcId: 
        Fn::ImportValue: !Sub dmitri-vpc

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE
      ClusterName: dmitri-cluster
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled

    DependsOn: ECSApplicationLoadBalancer



  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: arn:aws:iam::861507897222:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::861507897222:role/dmitriEcsAccessS3 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Image: 861507897222.dkr.ecr.eu-north-1.amazonaws.com/node_app
          Name: dmitri-task-definition-cf
          PortMappings: 
            - AppProtocol: http
              ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
            - AppProtocol: http
              ContainerPort: 3306
              HostPort: 3306
              Protocol: http
          Environment:
            - Name: PORT
              Value: 3000
            - Name: DB_DATABASE
              Value: node_app
            - Name: DB_HOST
              Value: !GetAtt MyDB.Endpoint.Address
            - Name: DB_PASSWORD
              Value: !Ref pDatabasePassword
            - Name: DB_PORT
              Value: 3306
            - Name: DB_USER
              Value: !Ref pDatabaseUser
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group": "node-ecs"
              "awslogs-region": "eu-north-1"
              "awslogs-create-group": "true"
              "awslogs-stream-prefix": "dmitri"



  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      EnableExecuteCommand: !Ref pEnableExecute
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - Fn::ImportValue: !Sub dmitri-sg-fargate-container 
          Subnets: 
            - Fn::ImportValue: !Sub dmitri-private-subnet-01
            - Fn::ImportValue: !Sub dmitri-private-subnet-02
      LoadBalancers:
        - ContainerName: dmitri-task-definition-cf
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref ECSTaskDefinition


  ArtifactStoreBucket:
    Type: "AWS::S3::Bucket"



  CodePipeLine:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      RoleArn: arn:aws:iam::861507897222:role/CodePipelineServiceRole
      Stages:
        - Name: Source
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              RunOrder: 1
              Configuration: 
                ConnectionArn: arn:aws:codestar-connections:eu-north-1:861507897222:connection/3539e571-f68d-4976-924d-214a46cd5fcd
                FullRepositoryId: kanopo/hello_express
                BranchName: cloudformation-ecs
              Name: SourceAction
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions: 
            - InputArtifacts: 
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 2
              Configuration: 
                ProjectName: dmitri-build-node-docker
                PrimarySource: SourceArtifact
              Name: BuildAction
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions: 
            - InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              RunOrder: 3
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imageDefinitions.json
              Name: DeployAction


Outputs:
  LoadBalancerDns:
    Description: Load balancer dns name
    Value: !GetAtt ECSApplicationLoadBalancer.DNSName

  MysqlUrl:
    Description: Mysql url
    Value: !GetAtt MyDB.Endpoint.Address 

Description: 'Spawn vpc, 4 subnet(2 pub, 2 priv), internet gateway, nat, bastion'
Parameters:
  pVpcCidrBlock:
    Description: VPC CIDR range
    Type: String
    Default: '10.10.0.0/16'

  pPublicSubnet01CidrBlock:
    Description: Subnet CIDR range
    Type: String
    Default: '10.10.0.0/24'

  pPublicSubnet02CidrBlock:
    Description: Subnet CIDR range
    Type: String
    Default: '10.10.1.0/24'
  
  pPrivateSubnet01CidrBlock:
    Description: Subnet CIDR range
    Type: String
    Default: '10.10.2.0/24'
  
  pPrivateSubnet02CidrBlock:
    Description: Subnet CIDR range
    Type: String
    Default: '10.10.3.0/24'

  pAmiId:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2



  pCreateBastion:
    Description: Create bastion host
    Type: String
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"

  pCreateNat:
    Description: Create NAT Gateway
    Type: String
    AllowedValues:
      - "yes"
      - "no" 
    Default: "yes"


Conditions:
  haveBastion: !Equals
    - !Ref pCreateBastion
    - "yes"

  haveNat: !Equals
    - !Ref pCreateNat
    - "yes"

  notHaveNat: !Equals
    - !Ref pCreateNat
    - "no"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref pVpcCidrBlock
      EnableDnsHostnames: false
      EnableDnsSupport: true
      InstanceTenancy: default
      # Ipv4IpamPoolId: String
      # Ipv4NetmaskLength: Integer
      # Tags: 
      #   - Tag

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties: 
      # AssignIpv6AddressOnCreation: false
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      # AvailabilityZoneId: String
      CidrBlock: !Ref pPublicSubnet01CidrBlock
      # EnableDns64: Boolean
      # Ipv6CidrBlock: String
      # Ipv6Native: Boolean
      MapPublicIpOnLaunch: true
      # OutpostArn: String
      # PrivateDnsNameOptionsOnLaunch: 
      #   PrivateDnsNameOptionsOnLaunch
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties: 
      # AssignIpv6AddressOnCreation: false
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      # AvailabilityZoneId: String
      CidrBlock: !Ref pPublicSubnet02CidrBlock
      # EnableDns64: Boolean
      # Ipv6CidrBlock: String
      # Ipv6Native: Boolean
      MapPublicIpOnLaunch: true
      # OutpostArn: String
      # PrivateDnsNameOptionsOnLaunch: 
      #   PrivateDnsNameOptionsOnLaunch
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties: 
      # AssignIpv6AddressOnCreation: false
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      # AvailabilityZoneId: String
      CidrBlock: !Ref pPrivateSubnet01CidrBlock
      # EnableDns64: Boolean
      # Ipv6CidrBlock: String
      # Ipv6Native: Boolean
      MapPublicIpOnLaunch: false
      # OutpostArn: String
      # PrivateDnsNameOptionsOnLaunch: 
      #   PrivateDnsNameOptionsOnLaunch
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties: 
      # AssignIpv6AddressOnCreation: false
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      # AvailabilityZoneId: String
      CidrBlock: !Ref pPrivateSubnet02CidrBlock
      # EnableDns64: Boolean
      # Ipv6CidrBlock: String
      # Ipv6Native: Boolean
      MapPublicIpOnLaunch: false
      # OutpostArn: String
      # PrivateDnsNameOptionsOnLaunch: 
      #   PrivateDnsNameOptionsOnLaunch
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC


  InternetGateway01:
    Type: AWS::EC2::InternetGateway

  VpcGatewayAttachment01:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway01
      VpcId: !Ref VPC
      # VpnGatewayId: String


  NATGateway01:
    Type: AWS::EC2::NatGateway
    Condition: haveNat
    Properties:
        AllocationId: !GetAtt NATGatewayEIP01.AllocationId
        SubnetId: !Ref PublicSubnet01


  NATGatewayEIP01:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPC


  PublicRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC


  PublicRoute01:
    Type: AWS::EC2::Route
    Properties: 
      # CarrierGatewayId: String
      DestinationCidrBlock: '0.0.0.0/0'
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      GatewayId: !Ref InternetGateway01
      # InstanceId: String
      # LocalGatewayId: String
      # NatGatewayId: String
      # NetworkInterfaceId: String
      RouteTableId: !Ref PublicRouteTable01
      # TransitGatewayId: String
      # VpcEndpointId: String
      # VpcPeeringConnectionId: String

  PrivateRoute01:
    Type: AWS::EC2::Route
    Properties: 
      # CarrierGatewayId: String
      DestinationCidrBlock: '0.0.0.0/0'
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      # GatewayId: string
      InstanceId: !If [haveNat, !Ref AWS::NoValue, !Ref Bastion]
      # LocalGatewayId: String
      # NatGatewayId: !Ref NATGateway01
      NatGatewayId: !If [haveNat, !Ref NATGateway01, !Ref AWS::NoValue]
      # NetworkInterfaceId: String
      RouteTableId: !Ref PrivateRouteTable01
      # TransitGatewayId: String
      # VpcEndpointId: String
      # VpcPeeringConnectionId: String
    # DependsOn: NATGateway01

  PublicRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable01
      SubnetId: !Ref PublicSubnet01

  PublicRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable01
      SubnetId: !Ref PublicSubnet02

  PrivateRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable01
      SubnetId: !Ref PrivateSubnet01

  PrivateRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable01
      SubnetId: !Ref PrivateSubnet02


  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: haveBastion
    Properties: 
      GroupDescription: Security group for ssh connections
      GroupName: BastionSecurityGroup
      # SecurityGroupEgress: 
      #   - Egress
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC

  BastionNatInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: notHaveNat
    Properties: 
      GroupDescription: Security group for bastion NAT instance
      GroupName: BastionNatSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"

      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: !GetAtt PrivateSubnet01.CidrBlock
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: !GetAtt PrivateSubnet01.CidrBlock

        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: !GetAtt PrivateSubnet02.CidrBlock
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: !GetAtt PrivateSubnet02.CidrBlock
      # Tags: 
      #   - Tag
      VpcId: !Ref VPC

  Bastion:
    Type: AWS::EC2::Instance
    Condition: haveBastion
    Properties: 
      # AdditionalInfo: String
      # Affinity: String
      # AvailabilityZone: String
      # BlockDeviceMappings: 
      #   - BlockDeviceMapping
      # CpuOptions: 
      #   CpuOptions
      # CreditSpecification: 
      #   CreditSpecification
      # DisableApiTermination: false
      # EbsOptimized: false
      # ElasticGpuSpecifications: 
      #   - ElasticGpuSpecification
      # ElasticInferenceAccelerators: 
      #   - ElasticInferenceAccelerator
      # EnclaveOptions: 
      #   EnclaveOptions
      # HibernationOptions: 
      #   HibernationOptions
      # HostId: String
      # HostResourceGroupArn: String
      # IamInstanceProfile: String
      ImageId: !Ref pAmiId 
      # InstanceInitiatedShutdownBehavior: String
      InstanceType: t3.micro
      # Ipv6AddressCount: Integer
      # Ipv6Addresses: 
      #   - InstanceIpv6Address
      # KernelId: String
      KeyName: dmitri
      # LaunchTemplate: 
      #   LaunchTemplateSpecification
      # LicenseSpecifications: 
      #   - LicenseSpecification
      Monitoring: true
      # NetworkInterfaces: 
      #   - !Ref N
      # PlacementGroupName: String
      # PrivateDnsNameOptions: 
      #   PrivateDnsNameOptions
      # PrivateIpAddress: String
      # PropagateTagsToVolumeOnCreation: Boolean
      # RamdiskId: String
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
        - !If [notHaveNat, !Ref BastionNatInstanceSecurityGroup, !Ref AWS::NoValue]
      # SecurityGroups: 
      #   - String
      SourceDestCheck: false
      # SsmAssociations: 
      #   - SsmAssociation
      SubnetId: !Ref PublicSubnet01
      # Tags: 
      #   - Tag
      # Tenancy: String
      # UserData: "sudo yum install iptables-services -y; echo 1 > /proc/sys/net/ipv4/ip_forward; iptables -t nat -A POSTROUTING -j MASQUERADE; iptables-save > /etc/sysconfig/iptables; systemctl enable iptables; systemctl start iptables"
      UserData: 
        Fn::Base64: |
          #!/bin/sh
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          mkdir -p /etc/sysctl.d/
          cat <<EOF > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          EOF 

      # Volumes: 
      #   - Volume


  TestEc2:
    Type: AWS::EC2::Instance
    # Condition: haveBastion
    Properties: 
      # AdditionalInfo: String
      # Affinity: String
      # AvailabilityZone: String
      # BlockDeviceMappings: 
      #   - BlockDeviceMapping
      # CpuOptions: 
      #   CpuOptions
      # CreditSpecification: 
      #   CreditSpecification
      # DisableApiTermination: false
      # EbsOptimized: false
      # ElasticGpuSpecifications: 
      #   - ElasticGpuSpecification
      # ElasticInferenceAccelerators: 
      #   - ElasticInferenceAccelerator
      # EnclaveOptions: 
      #   EnclaveOptions
      # HibernationOptions: 
      #   HibernationOptions
      # HostId: String
      # HostResourceGroupArn: String
      # IamInstanceProfile: String
      ImageId: !Ref pAmiId 
      # InstanceInitiatedShutdownBehavior: String
      InstanceType: t3.micro
      # Ipv6AddressCount: Integer
      # Ipv6Addresses: 
      #   - InstanceIpv6Address
      # KernelId: String
      KeyName: dmitri
      # LaunchTemplate: 
      #   LaunchTemplateSpecification
      # LicenseSpecifications: 
      #   - LicenseSpecification
      Monitoring: true
      # NetworkInterfaces: !If [haveNat, !Ref NATGateway01, !Ref Bastion]
        # - !Ref N
      # PlacementGroupName: String
      # PrivateDnsNameOptions: 
      #   PrivateDnsNameOptions
      # PrivateIpAddress: String
      # PropagateTagsToVolumeOnCreation: Boolean
      # RamdiskId: String
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
      # SecurityGroups: 
      #   - String
      # SourceDestCheck: Boolean
      # SsmAssociations: 
      #   - SsmAssociation
      SubnetId: !Ref PrivateSubnet01
      # Tags: 
      #   - Tag
      # Tenancy: String
      # UserData: String
      # Volumes: 
      #   - Volume

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC setup"
        Parameters:
          - pVpcCidrBlock 
      -
        Label:
          default: "Subnet configuration"
        Parameters:
          - pPublicSubnet01CidrBlock
          - pPublicSubnet02CidrBlock
          - pPrivateSubnet01CidrBlock
          - pPrivateSubnet02CidrBlock
      -
        Label:
          default: "Create bastion host"

      -
        Label:
          default: "Create NAT Gateway"
        Parameters:
          - pCreateBastion

      -
        Label:
          default: "AMI ID"
        Parameters:
          - pAmiId

Outputs:
  BastionIp:
    Description: "Bastion IP"
    Value: !GetAtt Bastion.PublicIp
    Condition: haveBastion

  TestEc2Ip:
    Description: "Test ec2 private subnet ip"
    Value: !GetAtt TestEc2.PrivateIp
    # Condition: haveBastion

  MyStacksRegion:
    Value: !Ref "AWS::Region"
